//Merge Sort
//Average Running Time-nlogn
//Space complexity:O(n)
//Loop Invariant:

Merge Step:
Loop invariant: At the start of each iteration k of the for loop, the nonempty part of S contains the k âˆ’ 1 smallest elements of L and R, in sorted order. Moreover, L[i] and R[j] are the smallest elements of their arrays that have not been copied to S.

//cite: https://web.stanford.edu/class/archive/cs/cs161/cs161.1176/Sections/161-section-1.pdf

//Stable Sorting: Yes



void merge(int left[],int right[],int A[],int mid,int size)
{


   int i=0,j=0,k=0;
   while(k<size)
   {
      if(((left[i]>right[j])||(i==mid))&&(j!=size-mid))
      {
         A[k]=right[j];
         k++;
         j++;

      }
      else if(((left[i]<=right[j])||(j==size-mid))&&(i!=mid))
      {
         A[k]=left[i];
         k++;
         i++;

      }
   
   }
   /*for(int k=0;k<size;k++)
   {
      cout<<A[k]<<" ";
   }
   cout<<endl;*/

}


void mergesort(int A[],int size)
{
   //cout<<"Hi ..the result is generated using merge sort"<<endl;

   if(size==1)
   {
      return;
   }
   else
   {
      cout<<"Size="<<size<<endl;
      int mid=size/2;
      int left[mid];
      int right[size-mid];
      for(int i=0;i<mid;i++)
      {
         left[i]=A[i];
      }
      /*for(int i=0;i<mid;i++)
      {
         cout<<left[i]<<" ";
      }
      cout<<endl;*/
      for(int i=mid;i<size;i++)
      {
         right[i-mid]=A[i];
      }
      /*for(int i=mid;i<size;i++)
      {
         cout<<right[i-mid]<<" ";
      }
      cout<<endl;*/
      cout<<"Calling Merge Left"<<endl;
      mergesort(left,size/2);   //left part of the array
      cout<<"Calling Merge Right"<<endl;
      mergesort(right,size-mid);  //right part of the array
      cout<<"Calling Merge function"<<endl;
      merge(left,right,A,mid,size);
      for(int i=0;i<size;i++)
      {
         cout<<A[i]<<" ";
      }
      cout<<endl;
   }
}
